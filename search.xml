<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>react复习</title>
      <link href="2020/09/28/react%E5%A4%8D%E4%B9%A0/"/>
      <url>2020/09/28/react%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h3><ul><li>初始化阶段，设置props和state</li><li>挂在阶段，创建dom。我们在componentDidMount回调函数中调用接口获取数据</li><li>更新阶段，当props和state改变之后会重新执行。在更新阶段不能改变state，如果改变了会引起死循环</li><li>销毁阶段</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">          <span class="built_in">super</span>(props);</span><br><span class="line">          <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            count: <span class="number">1</span>,</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;counter初始化&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        componentWillMount() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;counter组件将要挂载&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 组件挂载完成，一般情况下我们都是在这个方法中进行数据获取的</span></span><br><span class="line">        componentDidMount() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;counter组件挂载完成&quot;</span>);</span><br><span class="line">          <span class="comment">// 调接口取数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        componentWillReceiveProps() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;组件将要接收新的属性&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此生命周期函数常常用来做组件性能优化</span></span><br><span class="line">        shouldComponentUpdate(p, s) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;counter组件是否需要更新&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        componentWillUpdate() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;counter组件将要更新&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        componentDidUpdate() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;counter组件更新完成&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        componentWillUnmount() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;counter组件销毁&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;button</span><br><span class="line">              onClick=&#123;<span class="function">() =&gt;</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">                  count: <span class="built_in">this</span>.state.count + <span class="number">1</span>,</span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">            &gt;</span><br><span class="line">              当前的计数值:&#123;<span class="built_in">this</span>.state.count&#125;</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;app&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="function和class定义组件区别"><a href="#function和class定义组件区别" class="headerlink" title="function和class定义组件区别"></a>function和class定义组件区别</h3><ul><li>function定义的组件没有自己的局部状态和生命周期函数，但是在16.8之后的版本中加入了hook，可以使用useState创建局部状态，和使用useEffect模拟生命周期。16.8之前的funciton组件又叫无状态组件</li><li>function定义的组件没有this指向问题</li><li>class定义的组件需要编写更多的代码，但是可读性更强</li><li>目前官网推荐的是使用function定义组件的写法</li></ul><h3 id="组件传参"><a href="#组件传参" class="headerlink" title="组件传参"></a>组件传参</h3><ul><li>父传子,使用props属性</li><li>子传父，使用方法调用，从父组件传递一个function到子组件</li><li>非相关组件传参使用Context上下文,可以定义全局变量</li><li>在正常项目开发的时候都是使用redux进行组件间的数据共享的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;mroderick&#x2F;PubSubJS 是一个js库用来实现数据的发布和订阅,类似事件总线的概念</span><br></pre></td></tr></table></figure><h3 id="vue和react的区别"><a href="#vue和react的区别" class="headerlink" title="vue和react的区别"></a>vue和react的区别</h3><ul><li>vue是数据双向绑定的，react是单项数据流的</li><li>vue使用的是单文件组件形式，react使用的是jsx语法</li><li>vue是一个个人项目，react是facebook出的一个框架项目</li><li>vue是一个完成的前端框架，react是针对前端视图层的一个库，主要解决的是视图渲染的问题</li><li>react学会之后可以使用reactNative做原生开发</li><li>eact在facebook的很多应用和项目中都有实际的场景案例,vue这方面的经验案例相对较少</li><li>目前国内主流的是vue框架，因为学习成本低，文档友好</li><li>react学习曲线比较陡峭，但是学会之后会发现很好用</li></ul><h4 id="class-子传父传参"><a href="#class-子传父传参" class="headerlink" title="class 子传父传参"></a>class 子传父传参</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">          <span class="built_in">super</span>(props);</span><br><span class="line">          <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            count: <span class="number">1</span>,</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="built_in">this</span>.countAdd = <span class="built_in">this</span>.countAdd.bind(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        countAdd(step) &#123;</span><br><span class="line">          <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            count: <span class="built_in">this</span>.state.count + step,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &lt;h1&gt;当前的count值为：&#123;<span class="built_in">this</span>.state.count&#125;&lt;/h1&gt;</span><br><span class="line">              &lt;Counter cc=&#123;<span class="built_in">this</span>.countAdd&#125; s=&#123;<span class="number">2</span>&#125; /&gt;</span><br><span class="line">              &lt;Counter cc=&#123;<span class="built_in">this</span>.countAdd&#125; s=&#123;<span class="number">5</span>&#125; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">          <span class="built_in">super</span>(props);</span><br><span class="line">          <span class="comment">// this.state = &#123;</span></span><br><span class="line">          <span class="comment">//   count: 1,</span></span><br><span class="line">          <span class="comment">// &#125;;</span></span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;button</span><br><span class="line">              onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// this.props.cc(2);</span></span><br><span class="line">                <span class="built_in">this</span>.props.cc(<span class="built_in">this</span>.props.s);</span><br><span class="line">              &#125;&#125;</span><br><span class="line">            &gt;</span><br><span class="line">              点一下</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;app&quot;</span>));</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="function子传参"><a href="#function子传参" class="headerlink" title="function子传参"></a>function子传参</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">      <span class="keyword">const</span> App = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> [count, setCount] = React.useState(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">const</span> countAdd = <span class="function">(<span class="params">step</span>) =&gt;</span> &#123;</span><br><span class="line">          setCount(count + step);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;当前的count值为：&#123;count&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;Counter cc=&#123;countAdd&#125; s=&#123;<span class="number">2</span>&#125; /&gt;</span><br><span class="line">            &lt;Counter cc=&#123;countAdd&#125; s=&#123;<span class="number">5</span>&#125; /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;button</span><br><span class="line">            onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              props.cc(props.s);</span><br><span class="line">            &#125;&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            点一下</span><br><span class="line">          &lt;/button&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;app&quot;</span>));</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="非相关组件传参"><a href="#非相关组件传参" class="headerlink" title="非相关组件传参"></a>非相关组件传参</h4><p><img src="C:\Users\宋先魁\AppData\Roaming\Typora\typora-user-images\image-20200903202925980.png" alt="image-20200903202925980"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">      <span class="comment">// 创建一个context对象</span></span><br><span class="line">          <span class="comment">// 创建好的对象有一个Provider组件 用来存储全局数据</span></span><br><span class="line">      <span class="comment">// 设置value属性实现全局数据的共享</span></span><br><span class="line">      <span class="keyword">const</span> Context = React.createContext();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//跨组件传参使用context上下文</span></span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">          <span class="built_in">super</span>(props);</span><br><span class="line">        &#125;</span><br><span class="line">        componentDidMount() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.context);</span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &lt;h1&gt;我是一个组件---&#123;<span class="built_in">this</span>.context.color&#125;&lt;/h1&gt;</span><br><span class="line">              &lt;C /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置App组件的contextType,</span></span><br><span class="line">      <span class="comment">// 设置之后就可以直接在组件内部使用this.context获取全局的数据</span></span><br><span class="line">      App.contextType = Context;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//再定义一个C组件</span></span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">          <span class="built_in">super</span>(props);</span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.context);</span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是组件C---&#123;this.context.color&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      C.contextType = Context;</span><br><span class="line">      ReactDOM.render(</span><br><span class="line">        &lt;Context.Provider value=&#123;&#123; <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>, <span class="attr">count</span>: <span class="number">1</span> &#125;&#125;&gt;</span><br><span class="line">          &lt;App /&gt;</span><br><span class="line">        &lt;/Context.Provider&gt;,</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">      );</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="childern"><a href="#childern" class="headerlink" title="childern"></a>childern</h3><p>在react中可以使用children的方式实现组件内部的一个简单嵌套</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">  <span class="comment">// 创建一个context对象</span></span><br><span class="line">  <span class="comment">// 创建好的对象有一个Provider组件 用来存储全局数据</span></span><br><span class="line">  <span class="comment">// 设置value属性实现全局数据的共享</span></span><br><span class="line">  <span class="keyword">const</span> Context = React.createContext();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//跨组件传参使用context上下文</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="built_in">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.context);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h1&gt;我是一个组件---&#123;<span class="built_in">this</span>.context.color&#125;&lt;/h1&gt;</span><br><span class="line">          &lt;C&gt;</span><br><span class="line">            &lt;h1&gt;我是一个一级标签&lt;/h1&gt;</span><br><span class="line">            &lt;button&gt;按钮&lt;/button&gt;</span><br><span class="line">          &lt;/C&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置App组件的contextType,</span></span><br><span class="line">  <span class="comment">// 设置之后就可以直接在组件内部使用this.context获取全局的数据</span></span><br><span class="line">  App.contextType = Context;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//再定义一个C组件</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="built_in">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.props.children);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.context);</span><br><span class="line">      <span class="comment">// 空标签的作用是 最外层 不会生成一个div容器</span></span><br><span class="line">      <span class="comment">// this.props.children 类似于插槽</span></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">          &lt;h1&gt;我是组件C---&#123;<span class="built_in">this</span>.context.color&#125;&lt;/h1&gt;</span><br><span class="line">          &lt;hr /&gt;</span><br><span class="line">          &#123;<span class="built_in">this</span>.props.children&#125;</span><br><span class="line">          &lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.context.changeColor(<span class="string">&quot;红色&quot;</span>)&#125;&gt;</span><br><span class="line">            红色</span><br><span class="line">          &lt;/button&gt;</span><br><span class="line">          &lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.context.changeColor(<span class="string">&quot;粉色&quot;</span>)&#125;&gt;</span><br><span class="line">            粉色</span><br><span class="line">          &lt;/button&gt;</span><br><span class="line">          &lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.context.changeColor(<span class="string">&quot;绿色&quot;</span>)&#125;&gt;</span><br><span class="line">            绿色</span><br><span class="line">          &lt;/button&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  C.contextType = Context;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="built_in">super</span>(props);</span><br><span class="line">      <span class="built_in">this</span>.state = &#123;</span><br><span class="line">        color: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="built_in">this</span>.changeColor = <span class="built_in">this</span>.changeColor.bind(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    changeColor(color) &#123;</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        color,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;Context.Provider</span><br><span class="line">          value=&#123;&#123;</span><br><span class="line">            color: <span class="built_in">this</span>.state.color,</span><br><span class="line">            count: <span class="number">1</span>,</span><br><span class="line">            changeColor: <span class="built_in">this</span>.changeColor,</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;<span class="built_in">this</span>.props.children&#125;</span><br><span class="line">        &lt;/Context.Provider&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;Provider&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;/Provider&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">  );</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="context-function使用"><a href="#context-function使用" class="headerlink" title="context-function使用"></a>context-function使用</h3><p><img src="C:\Users\宋先魁\AppData\Roaming\Typora\typora-user-images\image-20200903203939736.png" alt="image-20200903203939736"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">      <span class="keyword">const</span> Context = React.createContext();</span><br><span class="line">      <span class="comment">// useContext 是16.8之后新增的hook</span></span><br><span class="line">      <span class="comment">// 可以把一个Context上下文的数据映射到当前组件 (color: &quot;red&quot; )</span></span><br><span class="line">      <span class="keyword">const</span> App = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> context = React.useContext(Context);</span><br><span class="line">        <span class="built_in">console</span>.log(context);</span><br><span class="line">        <span class="keyword">const</span> [count, setCount] = React.useState(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;div className=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">            &lt;h1&gt;我是一级标签&lt;/h1&gt;</span><br><span class="line">            &lt;Ball /&gt;</span><br><span class="line">            &lt;hr /&gt;</span><br><span class="line">            &lt;SetColors /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//设置颜色组件</span></span><br><span class="line">      <span class="keyword">const</span> SetColors = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> context = React.useContext(Context);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;&gt;</span><br><span class="line">            &lt;button onClick=&#123;<span class="function">() =&gt;</span> context.setColor(<span class="string">&quot;red&quot;</span>)&#125;&gt;红色&lt;/button&gt;</span><br><span class="line">            &lt;button onClick=&#123;<span class="function">() =&gt;</span> context.setColor(<span class="string">&quot;green&quot;</span>)&#125;&gt;绿色&lt;/button&gt;</span><br><span class="line">            &lt;button onClick=&#123;<span class="function">() =&gt;</span> context.setColor(<span class="string">&quot;blue&quot;</span>)&#125;&gt;蓝色&lt;/button&gt;</span><br><span class="line">          &lt;/&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//小球组件</span></span><br><span class="line">      <span class="keyword">const</span> Ball = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> context = React.useContext(Context);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;div</span><br><span class="line">            className=<span class="string">&quot;ball&quot;</span></span><br><span class="line">            style=&#123;&#123; <span class="attr">backgroundColor</span>: context.color &#125;&#125;</span><br><span class="line">          &gt;&lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> Provider = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(props);</span><br><span class="line">        <span class="keyword">const</span> &#123; children &#125; = props;</span><br><span class="line">        <span class="built_in">console</span>.log(children);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> [color, setColor] = React.useState(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;Context.Provider value=&#123;&#123; color, setColor &#125;&#125;&gt;</span><br><span class="line">            &#123;children&#125;</span><br><span class="line">          &lt;/Context.Provider&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      ReactDOM.render(</span><br><span class="line">        &lt;Provider&gt;</span><br><span class="line">          &lt;App /&gt;</span><br><span class="line">        &lt;/Provider&gt;,</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">      );</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>可以获取当前组件中的dom元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">          <span class="built_in">super</span>(props);</span><br><span class="line">          <span class="built_in">this</span>.sss = React.createRef();</span><br><span class="line">        &#125;</span><br><span class="line">        componentDidMount() &#123;</span><br><span class="line">          <span class="comment">// refs 可以获取组件中所有的设置了ref属性的标签</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.refs); <span class="comment">// &#123;x:p,ipt:input&#125;</span></span><br><span class="line">          <span class="comment">//通过createRef创建的节点，需要通过current属性获取dom</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.sss); <span class="comment">// &#123;current:h3&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        render() &#123;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">              &lt;h3 ref=&#123;<span class="built_in">this</span>.sss&#125;&gt;我是三级&lt;/h3&gt;</span><br><span class="line">              &lt;p ref=<span class="string">&quot;x&quot;</span>&gt;这是一个p标签&lt;/p&gt;</span><br><span class="line">              &lt;input ref=<span class="string">&quot;ipt&quot;</span> type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;请输入内容&quot;</span> /&gt;</span><br><span class="line">              &lt;button</span><br><span class="line">                onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                  <span class="built_in">console</span>.log(<span class="built_in">this</span>.refs.ipt.value);</span><br><span class="line">                &#125;&#125;</span><br><span class="line">              &gt;</span><br><span class="line">                保存</span><br><span class="line">              &lt;/button&gt;</span><br><span class="line">              &lt;Demo /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 在function定义的组件中可以使用useRef获取当前组件中设置了ref属性的标签</span></span><br><span class="line">        <span class="keyword">const</span> h3 = React.useRef();</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;h1 ref=&#123;h3&#125;&gt;我是一个Demo组件中的标签&lt;/h1&gt;</span><br><span class="line">            &lt;button</span><br><span class="line">              onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// console.log(h3.current.innerText);</span></span><br><span class="line">                h3.current.innerText = <span class="string">&quot;被改了!!!&quot;</span>;</span><br><span class="line">              &#125;&#125;</span><br><span class="line">            &gt;</span><br><span class="line">              获取一下</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;app&quot;</span>));</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h4><ul><li><p>useState</p></li><li><p>useEffect</p><p>com ponentDidMount</p><p>componentDidUpdate</p><p>componentUnmount</p></li><li><p>useContext</p></li><li><p>useRef</p></li></ul><h4 id="使用脚手架搭建项目"><a href="#使用脚手架搭建项目" class="headerlink" title="使用脚手架搭建项目"></a>使用脚手架搭建项目</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app first-react-app # 创建一个react项目</span><br><span class="line">cd first-react-app</span><br><span class="line">npm start # 3000端口运行</span><br></pre></td></tr></table></figure><p>vue和react的区别：</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue复习</title>
      <link href="2020/09/28/vue%E5%A4%8D%E4%B9%A0/"/>
      <url>2020/09/28/vue%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><p>权限验证技术。JSON WebToken 是一个数据加密技术。是服务器端生成token的一种常见的手段</p><p>token是令牌，我们在调用一些需要登录之后才能访问的api接口事，需要传递用户信息。为了传递当前的用户状态数据，可以在请求头中设置一个token值</p><p>作为前端开发：我们在调用登录接口之后，服务器端会返回一个token数据，把这个数据存储在本地就好，以后调用接口的时候把这个token 在请求头中进行传递。需要注意一点，token服务器端给的是什么就存什么，千万不要自己随意修改。这个toekn是服务器加密之后的数据，只有服务器自己能解析，前端不需要解析。</p><h4 id="在nodejs中使用jwt"><a href="#在nodejs中使用jwt" class="headerlink" title="在nodejs中使用jwt"></a>在nodejs中使用jwt</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i jsonwebtoken  <span class="comment"># 安装插件 生成jwt的插件</span></span><br><span class="line">npm i express-jwt   <span class="comment"># express的jwt验证中间件</span></span><br></pre></td></tr></table></figure><p>注意事项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express-jwt 6.0更新之后需要加上一个配置项 algorithms 加密程序</span></span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&quot;express-jwt&quot;</span>);</span><br><span class="line">app.use(expressJWT(&#123; <span class="attr">secret</span>: <span class="string">&quot;yh-movie&quot;</span>, <span class="attr">algorithms</span>: [<span class="string">&quot;HS256&quot;</span>] &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析token</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> u = jwt.verify(req.headers[<span class="string">&quot;authorization&quot;</span>].split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>], <span class="string">&quot;yh-movie&quot;</span>); <span class="comment">// 获取token加密之间的数据</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在前端页面调用接口的时候需要在请求头中设置一个属性</span><br><span class="line">此处的token值为用户登录之后服务器端返回的数据</span><br><span class="line">authorization 值为 Bearer token</span><br><span class="line"></span><br><span class="line">此处需要重点注意的事情是:</span><br><span class="line">1. 关于接口权限验证的内容，遇到问题的时候找提供接口的人。因为不同人开发的接口此处的写法都有差异</span><br><span class="line">2. 关于token全部都是服务器端直接生成的，至于里面是什么内容，不需要关心</span><br></pre></td></tr></table></figure><h2 id="实时获取最新数据"><a href="#实时获取最新数据" class="headerlink" title="实时获取最新数据"></a>实时获取最新数据</h2><ol><li><p>轮询</p><p>在客户端设置一个定时器，每隔一段时间向服务器发起请求，获取最新的数据</p></li><li><p>websocket长连接</p><p>websocket是长连接，客户端可以和服务器建立起链接，连接成功之后，服务器端有最新的数据之后会主动的推送给客户端</p></li></ol><h4 id="聊天室"><a href="#聊天室" class="headerlink" title="聊天室"></a>聊天室</h4><h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p>目前现在主流的前端开发框架：vue，react，angular</p><ul><li><p>vue</p><p>作者是一个华人。vue在国内圈子中有非常高的人气，原因如下</p><ol><li>国人的情节</li><li>文档友好</li><li>入门简单</li><li>有非常丰富的第三方插件和库</li></ol></li><li><p>react</p><p>是facebook出的一款针对view视图层的library库</p><ol><li>背景出身好</li><li>react有非常成熟的项目案例和周边开发环境</li><li>react更灵活，更能体现js的特性</li><li>react想来来说学习成本比较高，不太适合新手</li></ol></li><li><p>angular</p><p>是google出的一款前端框架</p></li></ul><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p>backbone 是一个前端mvc开发框架，基于jQuery+backbone+underscore+require.js</p><p>easyui/jQueryUI 等这种框架</p><p>FrameWork7</p><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p><a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p><p>是一个前端MVVM的开发框架，基于数据双向绑定实现。</p><p>MVVM(Model View ViewModel)</p><p>model用来存储数据</p><p>view用来展示数据</p><p>ViewModel视图模型层，当数据改变的时候自动更新视图,实现数据双向绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">// 表示当前实例作用的html节点</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        msg: <span class="string">&#x27;我是一段话&#x27;</span></span><br><span class="line">    &#125;<span class="comment">// 表示数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li><p>v-model</p></li><li><p>v-model的原理：在实现技术上利用的是Object.defineProperty()，通过这个函数可以监听get，set事件，可以称它为基于依赖收集的观测机制。核心是VM，保证视图的一致性。采用数据劫持结合发布者-订阅者模式的方式，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><p>把data中的数据和form表单项进行双向绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;h5&gt;&#123;&#123;msg&#125;&#125;&lt;/h5&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;msg&quot;</span> /&gt;</span><br><span class="line">  &lt;label <span class="keyword">for</span>=<span class="string">&quot;&quot;</span>&gt;红色&lt;input type=<span class="string">&quot;checkbox&quot;</span> v-model=<span class="string">&quot;color[0].checked&quot;</span>/&gt;&lt;/label&gt;</span><br><span class="line">  &lt;label <span class="keyword">for</span>=<span class="string">&quot;&quot;</span>&gt;黄色&lt;input type=<span class="string">&quot;checkbox&quot;</span> v-model=<span class="string">&quot;color[1].checked&quot;</span>/&gt;&lt;/label&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;price+<span class="number">100</span>&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;./libs/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      color: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="number">1</span>,</span><br><span class="line">          name: <span class="string">&quot;红色&quot;</span>,</span><br><span class="line">          val: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">          checked: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="number">2</span>,</span><br><span class="line">          name: <span class="string">&quot;黄色&quot;</span>,</span><br><span class="line">          val: <span class="string">&quot;yellow&quot;</span>,</span><br><span class="line">          checked: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      price: <span class="number">100</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>v-for</p><p>循环</p><p>可以循环数字、字符串、数组、对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;h5&gt;循环字符串&lt;/h5&gt;</span><br><span class="line">  &lt;p v-<span class="keyword">for</span>=<span class="string">&quot;(item,index) in content&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;&#123;&#123;item&#125;&#125;---&#123;&#123;index&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;hr /&gt;</span><br><span class="line">  &lt;h5&gt;循环数字&lt;/h5&gt;</span><br><span class="line">  &lt;p v-<span class="keyword">for</span>=<span class="string">&quot;(item,index) in 3&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;&#123;&#123;item&#125;&#125;---&#123;&#123;index&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;hr /&gt;</span><br><span class="line">  &lt;h5&gt;循环数组&lt;/h5&gt;</span><br><span class="line">  &lt;p v-<span class="keyword">for</span>=<span class="string">&quot;(item,index) in list&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;&#123;&#123;item&#125;&#125;---&#123;&#123;index&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;hr /&gt;</span><br><span class="line">  &lt;h5&gt;循环对象中的数组&lt;/h5&gt;</span><br><span class="line">  &lt;p v-<span class="keyword">for</span>=<span class="string">&quot;item in colors&quot;</span> :key=<span class="string">&quot;item.id&quot;</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;hr /&gt;</span><br><span class="line">  &lt;p v-<span class="keyword">for</span>=<span class="string">&quot;(item,index) in person&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;&#123;&#123;item&#125;&#125;---&#123;&#123;index&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;./libs/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// v-for 可以循环 字符串 数字 数组 对象</span></span><br><span class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      content: <span class="string">&quot;海贼王&quot;</span>,</span><br><span class="line">      list: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>],</span><br><span class="line">      colors: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="number">1</span>,</span><br><span class="line">          name: <span class="string">&quot;红色&quot;</span>,</span><br><span class="line">          val: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">          checked: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="number">2</span>,</span><br><span class="line">          name: <span class="string">&quot;黄色&quot;</span>,</span><br><span class="line">          val: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">          checked: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      person: &#123;</span><br><span class="line">        name: <span class="string">&quot;小巴&quot;</span>,</span><br><span class="line">        skills: <span class="string">&quot;斩杀&quot;</span>,</span><br><span class="line">        fav: <span class="string">&quot;金币&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>v-on：</p><p>@ 用来绑定事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;!-- 事件如果不传参数，默认参数为event对象 --&gt;</span><br><span class="line">  &lt;button v-on:click=<span class="string">&quot;clickHandle&quot;</span>&gt;按钮&lt;/button&gt;</span><br><span class="line">  &lt;button @click=<span class="string">&quot;clickHandle(33)&quot;</span>&gt;按钮<span class="number">2</span>&lt;/button&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;text&quot;</span> @keyup=<span class="string">&quot;keyUpHandle&quot;</span> /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;./libs/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// v-on 表示绑定事件，但是一般我们都会简写为@</span></span><br><span class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="comment">// 此属性为方法，就是vue实例中所有可以直接调用的function</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="comment">// clickHandle: function () &#123;</span></span><br><span class="line">      <span class="comment">//   console.log(2222);</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      clickHandle(p) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(p);</span><br><span class="line">      &#125;,</span><br><span class="line">      keyUpHandle(e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.keyCode);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>v-bind</p><p>:,用来绑定数据        </p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/09/28/hello-world/"/>
      <url>2020/09/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
